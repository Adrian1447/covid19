{"version":3,"sources":["logo.svg","components/Navbar.js","components/Footer.js","DatosMundiales.js","DatosPeru.js","DatosRegionesPeru.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","Footer","href","DatosMundiales","useState","array","dataMundial","setdataMundial","loadingMundial","setLoadingMundial","actualizarComponente","setActualizarComponente","useEffect","a","fetch","respuesta","json","resultadoJSON","ObtencionDatos","src","logo","alt","onClick","style","color","role","cases","deaths","recovered","DatosPeru","hits","dataPeru","setDataPeru","loadingPeru","setLoadingPeru","axios","result","x","data","length","country","ObtensionDatos","total","newCases","totalDeaths","serious","totalRecovered","DatosRegionesPeru","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,qICS5BC,G,MAPA,WACb,OACE,yBAAKC,UAAU,uGACX,wBAAIA,UAAU,sCAAd,6BCHO,SAASC,IACpB,OACI,6BACI,4BAAQD,UAAU,+CACd,6BACA,uBAAGA,UAAU,QAAb,aAA2B,uBAAGE,KAAK,2CAAR,mB,qEC2E5BC,MA/Ef,WAA0B,MAEgBC,mBAAS,CAAEC,MAAO,KAFlC,WAEfC,EAFe,KAEFC,EAFE,OAGsBH,oBAAS,GAH/B,WAGfI,EAHe,KAGCC,EAHD,OAIkCL,oBAAS,GAJ3C,WAIfM,EAJe,KAIOC,EAJP,KAwBtB,OAlBAC,qBAAW,YACa,+BAAG,8BAAAC,EAAA,6DACnBJ,GAAkB,GADC,SAGKK,MAAM,0DAHX,cAGbC,EAHa,gBAKSA,EAAUC,OALnB,OAKbC,EALa,OAOnBV,EAAeU,GAEfR,GAAkB,GAElBE,GAAwB,GAXL,4CAAH,qDAcpBO,KACD,CAACR,IAGA,6BACI,6BAASV,UAAU,kBACf,yBAAKA,UAAU,gBAEX,6BAASA,UAAU,yBACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,uBAAuBmB,IAAKC,IAAMC,IAAI,eACrD,wBAAIrB,UAAU,aAAd,6BACA,uBAAGA,UAAU,QAAb,4GACA,uBAAGA,UAAU,cAAa,wFAA1B,OAIR,6BACA,6BAASA,UAAU,yBACf,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sCACA,yBAAKA,UAAU,YACX,uBAAGA,UAAU,cAAa,yFAC1B,4BAAQA,UAAU,kBAAkBsB,QAAS,kBAAMX,GAAwB,KAA3E,oCAIJ,yBAAKX,UAAU,OACX,yBAAKA,UAAU,YACX,oDACA,6DAAkC,0CAAlC,uBACA,yBAAKA,UAAU,QAAQuB,MAAO,CAACC,MAAM,WACpChB,EAAiB,yBAAKR,UAAU,8BAA8ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAIM,EAAYoB,SAGzH,yBAAK1B,UAAU,YACX,uCACA,qEAA0C,0CAA1C,sBACA,yBAAKA,UAAU,SAASuB,MAAO,CAACC,MAAM,QACrChB,EAAgB,yBAAKR,UAAU,6BAA6ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAIM,EAAYqB,UAGvH,yBAAK3B,UAAU,YACX,iDACA,6EAAkD,2CAClD,yBAAKA,UAAU,YAAYuB,MAAO,CAACC,MAAM,UACxChB,EAAiB,yBAAKR,UAAU,8BAA8ByB,KAAK,WAAkB,wBAAIzB,UAAU,IAAIM,EAAYsB,gBAMpI,iC,iBCKLC,MA9Ef,WAAsB,IAAD,EACezB,mBAAS,CAAE0B,KAAM,KADhC,WACVC,EADU,KACAC,EADA,OAEqB5B,oBAAS,GAF9B,WAEV6B,EAFU,KAEGC,EAFH,OAGuC9B,oBAAS,GAHhD,WAGVM,EAHU,KAGYC,EAHZ,KAwBjB,OAnBAC,qBAAW,YACa,+BAAG,8BAAAC,EAAA,6DACnBqB,GAAe,GADI,SAEEC,IACjB,8DAHe,OAMnB,IAJMC,EAFa,OAKfC,EAAE,EACFA,EAAE,EAAGA,EAAED,EAAOE,KAAKC,OAAQF,IACG,SAA3BD,EAAOE,KAAKD,GAAGG,SACdR,EAAYI,EAAOE,KAAKD,IAGhCH,GAAe,GACfvB,GAAwB,GAZL,2CAAH,qDAcpB8B,KAED,CAAC/B,IAGA,6BACI,6BAASV,UAAU,mCACf,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,aAAd,8CACA,yBAAKA,UAAU,YACX,uBAAGA,UAAU,cAAa,yFAC1B,4BAAQA,UAAU,kBAAkBsB,QAAS,kBAAMX,GAAwB,KAA3E,oCAEJ,yBAAKX,UAAU,aACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,YACX,oDACA,uCAAY,0CAAZ,oBACA,yBAAKA,UAAU,YAAYuB,MAAO,CAACC,MAAM,WACxCS,EAAc,yBAAKjC,UAAU,8BAA8ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAI+B,EAASW,SAGnH,yBAAK1C,UAAU,YACX,4CACA,8CAAmB,0CAAnB,mBACA,yBAAKA,UAAU,aAAauB,MAAO,CAACC,MAAM,SACzCS,EAAc,yBAAKjC,UAAU,8BAA8ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAI+B,EAASY,YAGnH,yBAAK3C,UAAU,YACX,uCACA,+DAAoC,0CAApC,mBACA,yBAAKA,UAAU,aAAauB,MAAO,CAACC,MAAM,QACzCS,EAAc,yBAAKjC,UAAU,gCAAgCyB,KAAK,WAAmB,wBAAIzB,UAAU,IAAI+B,EAASa,eAGrH,yBAAK5C,UAAU,YACX,4CACA,uEAA4C,0CAA5C,mBACA,yBAAKA,UAAU,cACdiC,EAAc,yBAAKjC,UAAU,8BAA8ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAd,IAAmB+B,EAASc,QAA5B,OAGxF,yBAAK7C,UAAU,YACX,iDACA,6EAAkD,0CAAlD,kBACA,yBAAKA,UAAU,gBAAgBuB,MAAO,CAACC,MAAM,UAC5CS,EAAc,yBAAKjC,UAAU,8BAA8ByB,KAAK,WAAmB,wBAAIzB,UAAU,IAAd,IAAmB+B,EAASe,eAA5B,WAOpG,+BCjDGC,MA3Bf,WACI,OACI,6BACI,6BAAS/C,UAAU,2CACf,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,aAAd,kBACA,4BAAQA,UAAU,sBACd,yBAAKmB,IAAI,oEAAoEnB,UAAU,+BAA+BqB,IAAI,2BAC1H,gCAAYrB,UAAU,kBAAtB,+DAKZ,6BAEA,6BAASA,UAAU,2CACf,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,aAAd,iBACA,yBAAKA,UAAU,aACX,uBAAGA,UAAU,mBAAmBE,KAAK,sDAArC,6BCAT8C,MAbf,WAEE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC/C,EAAD,Q,MCHcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/index.main.1faa7288.production.chunk.min.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.94958d24.svg\";","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n        <h5 className=\"my-0 mr-md-auto font-weight-normal\">Coronavirus en Per√∫</h5>\n    </div>\n  )\n}\nexport default Navbar\n","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div>\n            <footer className=\"my-5 pt-5 text-muted text-center text-small\">\n                <hr></hr>\n                <p className=\"mb-1\">¬© 2020 <a href=\"https://www.linkedin.com/in/cuevacelis/\">@Cueva Celis</a></p>\n            </footer>\n        </div>\n    )\n}","import React, {useState,useEffect} from 'react';\nimport logo from './logo.svg'\n//alert(\"1\")\nfunction DatosMundiales() {\n    //alert(\"2\")\n    const [dataMundial, setdataMundial] = useState({ array: [] });\n    const [loadingMundial, setLoadingMundial] = useState(true);\n    const [actualizarComponente, setActualizarComponente] = useState(false);\n    //alert(\"3\")\n    useEffect( () => {\n        const ObtencionDatos = async () =>{\n            setLoadingMundial(true);\n            //alert(\"4\")\n            const respuesta = await fetch(\"https://proyectosupnjose.website/api/coronavirus/total\")\n            //alert(\"5\")\n            const resultadoJSON = await respuesta.json()\n            //alert(\"6\")\n            setdataMundial(resultadoJSON);\n            //alert(\"8\")\n            setLoadingMundial(false);\n            //alert(\"9\")\n            setActualizarComponente(false);\n            //alert(\"9.1\")\n        }\n        ObtencionDatos();\n    }, [actualizarComponente]);\n    //alert(\"10\")\n    return (\n        <div>\n            <section className=\"DatosMundiales\">\n                <div className=\" text-center\">\n                    \n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <img className=\"d-block mx-auto mb-4\" src={logo} alt=\"imgCovid19\"/>\n                            <h1 className=\"display-4\">Coronavirus en el Per√∫</h1>\n                            <p className=\"lead\">Aqu√≠ encontrar√°s informaci√≥n y noticias sobre el COVID-19 en Per√∫ y en el mundo.ü¶†</p>\n                            <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em> </p>\n                        </div>\n\n                    </section>\n                    <hr></hr>\n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <h1 className=\"display-4\">Datos del Mundo üó∫Ô∏è</h1>\n                            <div className=\"my-3 p-3\">\n                                <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em></p>\n                                <button className=\"btn btn-primary\" onClick={() => setActualizarComponente(true)}>Actualizar informaci√≥n ahora</button>\n                            </div>\n                            \n                            \n                            <div className=\"row\">\n                                <div className=\"col-md-4\">\n                                    <h2>Casos de Coronavirus</h2>\n                                    <p>Todos los casos confirmados de <code>Covid-19</code> en todo el mundo. </p>\n                                    <div className=\"cases\" style={{color:\"purple\" }}>\n                                    {loadingMundial ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{dataMundial.cases}</h4>}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <h2>Muertes</h2>\n                                    <p>La cantidad de muertes causadas por el <code>Covid-19</code> en todo el mundo.</p>\n                                    <div className=\"deaths\" style={{color:\"red\" }}>\n                                    {loadingMundial ?<div className=\"spinner-border text-danger\" role=\"status\"></div>  : <h4 className=\"\">{dataMundial.deaths}</h4>}\n                                    </div>\n                                </div>\n                                <div className=\"col-md-4\">\n                                    <h2>Casos recuperados</h2>\n                                    <p>La cantidad de personas que se recuperaron del <code>Covid-19</code></p>\n                                    <div className=\"recovered\" style={{color:\"green\" }}>\n                                    {loadingMundial ? <div className=\"spinner-border text-success\" role=\"status\"></div> : <h4 className=\"\">{dataMundial.recovered}</h4>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                    <hr></hr>\n                </div>\n            </section>\n        </div>\n    )\n}\nexport default DatosMundiales","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction DatosPeru() {\n    const [dataPeru, setDataPeru] = useState({ hits: [] });\n    const [loadingPeru, setLoadingPeru] = useState(true);\n    const [actualizarComponente, setActualizarComponente] = useState(false);\n\n    useEffect( () => {\n        const ObtensionDatos = async () =>{\n            setLoadingPeru(true);\n            const result = await axios(\n                'https://proyectosupnjose.website/api/coronavirus/countries',\n            );\n            var x=0;\n            for(x=0; x<result.data.length; x++) {\n                if(result.data[x].country === 'Peru'){\n                    setDataPeru(result.data[x]);\n                }\n            }\n            setLoadingPeru(false);\n            setActualizarComponente(false);\n        }\n        ObtensionDatos();\n\n    }, [actualizarComponente]);\n\n    return (\n        <div>\n            <section className=\"jumbotron text-center DatosPeru\">\n                <div className=\" text-center\">\n                    <h1 className=\"display-4\">Datos del Per√∫ üáµüá™</h1>\n                    <div className=\"my-3 p-3\">\n                        <p className=\"text-muted\"><em>(Mantenemos actualizada nuestra informaci√≥n a diario)</em></p>\n                        <button className=\"btn btn-primary\" onClick={() => setActualizarComponente(true)}>Actualizar informaci√≥n ahora</button>\n                    </div>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <h2>Casos de Coronavirus</h2>\n                            <p>Casos de <code>Covid-19</code> en el Per√∫. </p>\n                            <div className=\"casesPeru\" style={{color:\"purple\" }}>\n                            {loadingPeru ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{dataPeru.total}</h4>}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h2>Nuevos Casos</h2>\n                            <p>Nuevos casos de <code>Covid-19</code> en el Per√∫.</p>\n                            <div className=\"deathsPeru\" style={{color:\"blue\" }}>\n                            {loadingPeru ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">{dataPeru.newCases}</h4>}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h2>Muertes</h2>\n                            <p>Total de muertes causadas por el <code>Covid-19</code> en el Per√∫.</p>\n                            <div className=\"deathsPeru\" style={{color:\"red\" }}>\n                            {loadingPeru ? <div className=\"spinner-border text-secondary\" role=\"status\"></div>  : <h4 className=\"\">{dataPeru.totalDeaths}</h4>}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h2>Casos Serios</h2>\n                            <p>Total de casos graves ocasionados por el <code>Covid-19</code> en el Per√∫.</p>\n                            <div className=\"deathsPeru\">\n                            {loadingPeru ? <div className=\"spinner-border text-primary\" role=\"status\"></div>  : <h4 className=\"\">-{dataPeru.serious}-</h4>}\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <h2>Casos recuperados</h2>\n                            <p>La cantidad de personas que se recuperaron del <code>Covid-19</code> en el Per√∫</p>\n                            <div className=\"recoveredPeru\" style={{color:\"green\" }}>\n                            {loadingPeru ? <div className=\"spinner-border text-success\" role=\"status\"></div>  : <h4 className=\"\">-{dataPeru.totalRecovered}-</h4>}\n                            </div>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <hr></hr>\n        </div>\n    )\n}\nexport default DatosPeru","import React from 'react';\nfunction DatosRegionesPeru() {\n    return (\n        <div>\n            <section className=\"DatosRegionesPeru jumbotron text-center\">\n                <div className=\" text-center\">\n                    <h2 className=\"display-4\">Reporte Diario</h2>\n                    <figure className=\"figure text-center\">\n                        <img src=\"https://pbs.twimg.com/media/ETffyMZXYAAtY8g?format=jpg&name=large\" className=\"figure-img img-fluid rounded\" alt=\"Reporte de Coronovirus\"/>\n                        <figcaption className=\"figure-caption\">Reporte Diario del Covid-19 en las regiones del Per√∫.</figcaption>\n                    </figure>\n                </div>\n            </section>\n\n            <hr></hr>\n\n            <section className=\"DatosRegionesPeru jumbotron text-center\">\n                <div className=\" text-center\">\n                    <h2 className=\"display-4\">Twitter Minsa</h2>\n                    <div className=\"container\">\n                        <a className=\"twitter-timeline\" href=\"https://twitter.com/Minsa_Peru?ref_src=twsrc%5Etfw\">Tweets by Minsa_Peru</a>\n                    </div>\n                \n                </div>\n            </section>\n        </div>\n    )\n}\nexport default DatosRegionesPeru","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\nimport DatosMundiales from './DatosMundiales'\nimport DatosPeru from './DatosPeru'\nimport DatosRegionesPeru from './DatosRegionesPeru'\n\nfunction App (){\n  \n  return (\n    <div>\n      <Navbar />\n      <DatosMundiales />\n      <DatosPeru />\n      <DatosRegionesPeru />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  console.log(\"check\")\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      console.log(\"check1\")\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        console.log(\"no servicio worker enocntrado\")\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        console.log(\"o check\")\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n//console.time('TIME index.js');\nReactDOM.render(<App />, document.getElementById('root'));\n//console.timeEnd('TIME index.js');\nserviceWorker.unregister();\n"],"sourceRoot":""}